typedef O { "" };
typedef Q { "" };
typedef P { "" } = (O) | (Q);

typedef A { "" } = L(fun O -> O) { "" };
typedef B { "" } = M(fun P -> P) { "" };

typedef Correct' { "" } = ( M(fun P -> P) ) { "" };
typedef Correct'' { "" } = ( M(fun O -> P) ) { "" };
typedef Correct''' { "" } = ( M(fun P -> O) ) { "" };
typedef Correct'''' { "" } = ( M(fun P -> P) ) { "" };

typedef Incorrect { "" } = ( L(fun P -> O) ) { "" };
